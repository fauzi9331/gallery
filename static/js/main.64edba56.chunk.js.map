{"version":3,"sources":["common/functions/colorsGenerator.ts","common/constants/colorNameList.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["generateUniqueCombinationOfNumbersArray","combinationLength","arrayLength","res","numbers","length","i","push","Math","random","includes","colorsGenerator","colorFilter","colorArrayLength","valuesArray","colors","darkerCompensation","saturation","category","map","value","hue","lightness","color","colorNameList","App","useState","setCategory","setSaturation","className","htmlFor","name","id","onChange","event","target","colorName","type","checked","idx","style","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64edba56.chunk.js","sourcesContent":["import ColorFilter from '../interfaces/ColorFilter'\r\nimport ColorObject from '../interfaces/ColorObject'\r\n\r\nfunction colorsGenerator(colorFilter:ColorFilter, colorArrayLength:number=40):string[] {\r\n  /*\r\n    generate array of colors in format 'hsl(hue, saturation, lightness)`\r\n  */\r\n  let valuesArray:number[][] = generateUniqueCombinationOfNumbersArray(3,colorArrayLength)\r\n  let colors: ColorObject[] = []\r\n  let darkerCompensation = (colorFilter.saturation !== 'darker' ? 50 : 0)\r\n\r\n  switch(colorFilter.category){\r\n    case 'gray':\r\n      colors = valuesArray.map(value => {\r\n        return {\r\n          hue:0,\r\n          saturation:0,\r\n          lightness: value[2] * 50 + darkerCompensation\r\n        }\r\n      })\r\n      break\r\n    case 'red':\r\n      colors = valuesArray.map(value => {\r\n        return {\r\n          hue: value[0] * 60 - 30,\r\n          saturation: value[1] * 50 + darkerCompensation,\r\n          lightness: value[2] * 50 + darkerCompensation\r\n        }\r\n      })\r\n      break\r\n    case 'yellow':\r\n      colors = valuesArray.map(value => {\r\n        return {\r\n          hue: value[0] * 60 + 30,\r\n          saturation: value[1] * 50 + darkerCompensation,\r\n          lightness: value[2] * 50 + darkerCompensation\r\n        }\r\n      })\r\n      break\r\n    case 'green':\r\n      colors = valuesArray.map(value => {\r\n        return {\r\n          hue: value[0] * 60 + 90,\r\n          saturation: value[1] * 50 + darkerCompensation,\r\n          lightness: value[2] * 50 + darkerCompensation\r\n        }\r\n      })\r\n      break\r\n    case 'cyan':\r\n      colors = valuesArray.map(value => {\r\n        return {\r\n          hue: value[0] * 60 + 150,\r\n          saturation: value[1] * 50 + darkerCompensation,\r\n          lightness: value[2] * 50 + darkerCompensation\r\n        }\r\n      })\r\n      break\r\n    case 'blue':\r\n      colors = valuesArray.map(value => {\r\n        return {\r\n          hue: value[0] * 60 + 210,\r\n          saturation: value[1] * 50 + darkerCompensation,\r\n          lightness: value[2] * 50 + darkerCompensation\r\n        }\r\n      })\r\n      break\r\n    case 'magenta':\r\n      colors = valuesArray.map(value => {\r\n        return {\r\n          hue: value[0] * 60 + 270,\r\n          saturation: value[1] * 50 + darkerCompensation,\r\n          lightness: value[2] * 50 + darkerCompensation\r\n        }\r\n      })\r\n      break\r\n    \r\n  }\r\n  return colors.map(color => {\r\n    return `hsl(${color.hue},${color.saturation}%,${color.lightness}%)`\r\n  })\r\n}\r\n\r\nfunction generateUniqueCombinationOfNumbersArray(combinationLength: number, arrayLength:number):Array<Array<number>>{\r\n  /*\r\n    generate array of combination of numbers between 0 and 1 with each length according to argument\r\n  */\r\n  let res:Array<Array<number>> = []\r\n  let numbers:Array<number> = []\r\n  while(res.length<arrayLength) {\r\n    // reset numbers\r\n    numbers = []\r\n    // populate combination of numbers\r\n    for(let i:number = 0; i < combinationLength; i++){\r\n      numbers.push(Math.random())\r\n    }\r\n\r\n    if(!res.includes(numbers)) {\r\n      res.push(numbers)\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\nexport default colorsGenerator","const colorNameList: Array<string> = [\r\n  'gray',\r\n  'red',\r\n  'yellow',\r\n  'green',\r\n  'cyan',\r\n  'blue',\r\n  'magenta'\r\n]\r\n\r\nexport default colorNameList","import React, { useState } from 'react';\nimport './App.css';\nimport colorsGenerator from './common/functions/colorsGenerator'\nimport ColorFilter from './common/interfaces/ColorFilter'\nimport colorNameList from './common/constants/colorNameList'\n\nfunction App() {\n  const [category, setCategory] = useState(colorNameList[0])\n  const [saturation, setSaturation] = useState('')\n\n  let colorFilter:ColorFilter = {\n    category: category,\n    saturation: saturation\n  }\n  // generate array of colors in format hsl()\n  let colors:Array<string> = colorsGenerator(colorFilter)\n\n  return (\n    <div className=\"App\">\n      {/*input box*/}\n      <div className=\"input-wrapper\">\n        <div className=\"input-group\">\n          <label htmlFor=\"category\">category: </label>\n          <select name=\"category\" id=\"category\" value={category} onChange={(event) => setCategory(event.target.value)}>\n            {\n              colorNameList.map(colorName => {\n                return <option key={colorName} value={colorName}>{colorName}</option>\n              })\n            }\n          </select>\n        </div>\n        <div className=\"input-group\">\n          <input type=\"checkbox\" id=\"saturation\" name=\"saturation\" value=\"darker\" onChange={(event) => setSaturation(event.target.checked ? event.target.value: '')}></input>\n          <label htmlFor=\"saturation\">darker</label>\n        </div>\n      </div>\n\n      {/*color box*/}\n      <div className=\"color-box-wrapper\">\n        {\n          colors.map((color, idx) => {\n            return <div key={idx} className='color-box' style={{backgroundColor: color}}></div>\n          })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}